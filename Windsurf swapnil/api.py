from fastapi import FastAPI, UploadFile, File, Form
from fastapi.responses import JSONResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from starlette.responses import RedirectResponse

import os
import io
import shutil
import time
import re
from typing import Optional

app = FastAPI(title="DreamCraft3D API (Mock)")

# Allow frontend to call same-origin easily; widen CORS for local dev if needed
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Ensure required folders exist
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
OUTPUTS_DIR = os.path.join(BASE_DIR, "outputs")
FRONTEND_DIR = os.path.join(BASE_DIR, "frontend")
os.makedirs(OUTPUTS_DIR, exist_ok=True)
os.makedirs(FRONTEND_DIR, exist_ok=True)

# Serve static frontend and generated outputs
app.mount("/outputs", StaticFiles(directory=OUTPUTS_DIR), name="outputs")
app.mount("/frontend", StaticFiles(directory=FRONTEND_DIR), name="frontend")


@app.get("/")
def root():
    # Redirect to the simple frontend
    return RedirectResponse(url="/frontend/index.html")


def slugify(value: str) -> str:
    value = value.strip().lower()
    value = re.sub(r"[^a-z0-9\-\_]+", "-", value)
    value = re.sub(r"-+", "-", value).strip("-")
    return value or f"job-{int(time.time())}"


# Minimal mock .obj generator (a simple cube)
CUBE_OBJ = """
# Mock cube OBJ generated by API
mtllib none
usemtl none
o Cube
v -1 -1  1
v  1 -1  1
v  1  1  1
v -1  1  1
v -1 -1 -1
v  1 -1 -1
v  1  1 -1
v -1  1 -1
vn 0 0 1
vn 0 0 -1
vn 0 1 0
vn 0 -1 0
vn 1 0 0
vn -1 0 0
s off
f 1//1 2//1 3//1 4//1
f 5//2 8//2 7//2 6//2
f 4//3 3//3 7//3 8//3
f 1//4 5//4 6//4 2//4
f 2//5 6//5 7//5 3//5
f 5//6 1//6 4//6 8//6
""".strip()


@app.post("/generate-3d")
async def generate_3d(prompt: str = Form(...), image: Optional[UploadFile] = File(None)):
    job_name = slugify(prompt) or f"job-{int(time.time())}"
    job_dir = os.path.join(OUTPUTS_DIR, job_name)
    os.makedirs(job_dir, exist_ok=True)

    # Save reference image if provided
    if image is not None:
        img_ext = os.path.splitext(image.filename or "image.png")[1] or ".png"
        img_path = os.path.join(job_dir, f"reference{img_ext}")
        with open(img_path, "wb") as f:
            shutil.copyfileobj(image.file, f)

    # Simulate generation latency
    time.sleep(1)

    # Write mock OBJ
    mesh_rel_path = f"outputs/{job_name}/mesh.obj"
    mesh_abs_path = os.path.join(BASE_DIR, mesh_rel_path)
    with open(mesh_abs_path, "w") as f:
        f.write(CUBE_OBJ + "\n")

    return JSONResponse({
        "status": "success",
        "mesh_file": mesh_rel_path,
        "prompt": prompt,
    })


@app.get("/health")
def health():
    return {"status": "ok"}
